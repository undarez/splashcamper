// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model CamperWashStation {
  id        Int      @id @default(autoincrement())
  name      String
  lat       Float
  lng       Float
  address   String
  createdAt DateTime @default(now())
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  age   Int?   // Le champ age, défini comme optionnel
  camperModel    String?  // Nouveau champ pour le modèle de camping-car
  usageFrequency String?  // Nouveau champ pour la fréquence d'utilisation
  department     String?
  image         String?
  accounts      Account[]       // Relation vers Account
  sessions      Session[]       // Relation vers Session
  // Optional for WebAuthn support
  Authenticator Authenticator[] // Relation vers Authenticator
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                 String   @id @default(cuid()) // Ajoute un identifiant unique
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation vers User
}


model Session {
  id          String   @id @default(cuid()) // Ajoute un identifiant unique
  userId     String
  expires     DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation vers User
  @@id([userId, credentialID])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
